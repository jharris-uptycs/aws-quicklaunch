AWSTemplateFormatVersion: '2010-09-09'
Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - E9008
      ignore_reasons:
        E9008: No QSID for this template
  AWS::CloudFormation::Interface:
    ParameterLabels:
      UptycsSecretName:
        default: "The name of the secret created by QuickLaunch"
#      UptycsAPIKey:
#        default: "The Uptycs API Key value from your credentials file"
#      UptycsCustomerId:
#        default: "The Uptycs API Customer ID value from your credentials file"
#      UptycsDomain:
#        default: "The Uptycs API Domain value from your credentials file"
#      UptycsDomainSuffix:
#        default: "The Uptycs API Domain suffix"
#      UptycsAccountId:
#        default: "The Uptycs Account (Do not change unless instructed to do so)"
      UptycsRoleName:
        default: "The name of the Role that Uptycs will assume in your account"
      PermissionsBoundary:
        default: "The name of the permissions boundary to apply to IAM roles"
      CloudTrailBucketName:
        default: "The cloudtrail bucket name normally aws-controltower-xxxx"
      CloudTrailBucketRegion:
        default: "The region where cloudtrail bucket is located"
      CloudTrailBucketLogPrefix:
        default: "The region where cloudtrail bucket is located"
      KMSKeyArn:
        default: "Add the SSE-KMS Arn if using KMS encryption.  Leave blank if using SSE-S3"
      UptycsStackSetName:
        default: "The Name of the Uptycs StackSet that will be created"
      ExistingAccounts:
        default: "Select yes to create a stack instance in all existing accounts"
      S3BucketName:
        default: "The S3 bucket containing Uptycs Source files"
      S3KeyPrefix:
        default: "The S3 bucket prefix for the source files"
    ParameterGroups:
      - Label:
          default: "Uptycs API Permissions"
        Parameters:
          - UptycsSecretName
#          - UptycsAPIKey
#          - UptycsSecret
#          - UptycsCustomerId
#          - UptycsDomain
#          - UptycsDomainSuffix
      - Label:
          default: Log Archive Account Parameters
        Parameters:
          - CloudTrailAccount
          - CloudTrailBucketName
          - CloudTrailBucketRegion
          - CloudTrailBucketLogPrefix
          - KMSKeyArn
      - Label:
          default: "AWS Related Configuration"
        Parameters:
          - UptycsAccountId
          - UptycsRoleName
          - PermissionsBoundary
      - Label:
          default: "Stackset Related Information"
        Parameters:
          - UptycsStackSetName
          - ExistingAccounts
      - Label:
          default: "Source file bucket Parameters (Change of self hosting)"
        Parameters:
          - S3BucketName
          - S3KeyPrefix

Parameters:
  ## Uptycs API permissions stored in parameter store
  UptycsSecretName:
    Description: Uptycs API Key Secret Name
    Type: String
    Default: 'uptycs-api-secrets'
#  UptycsAPIKey:
#    Description: Uptycs API Key
#    Type: String
#    NoEcho: True
#    Default: EBNBT7OLWR5XRKTCYIIZVTJ22ENNXZCJ
#  UptycsSecret:
#    Description: Uptycs API Secret
#    Type: String
#    NoEcho: True
#    Default: eaKNTt2TIwbfXnskvHlpGA8t0dcAJ0V2OAxG7OSq8ke7t+qFHS+fIuUIg1fyYlgs
#  UptycsCustomerId:
#    Description: Uptycs API CustomerId
#    Type: String
#    NoEcho: True
#    Default: 3673a4d8-99d2-4d69-a784-858cdfd7fdb7
#  UptycsDomain:
#    Description: Uptycs Domain
#    Type: String
#    NoEcho: True
#    Default: cloudint
#  UptycsDomainSuffix:
#    Description: Uptycs Domain
#    Type: String
#    NoEcho: True
#    Default: '.uptycs.io'
  UptycsAccountId:
    Description: Aws account id of Uptycs
    Type: String
    Default: 031552911331
  UptycsRoleName:
    Type: String
    Description: Name for Uptycs CSPM Reader Role
    Default: UptycsIntegrationRole
  S3BucketName:
    Type: String
    Description: Name of the zip file bucket
    Default: "uptycs-cloud-integrations-test"
  S3KeyPrefix:
    Type: String
    Description: Prefix for the zip files
    Default: "uptycs-ct-quicklaunch"
  UptycsStackSetName:
    Type: String
    Description: "The StackSet name"
    Default: "Uptycs-Integration-StackSet"
  ExistingAccounts:
    Type: String
    Description: "Add Stack Instance to each existing account in the org"
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  CloudTrailAccount:
    Type: String
    Description: Name of your cloudtrail bucket
    Default: 004881111746
  CloudTrailBucketName:
    Type: String
    Description: Name of your cloudtrail bucket
    Default: aws-controltower-logs-004881111746-eu-west-1
  CloudTrailBucketRegion:
    Type: String
    Description: Cloudtrail bucket region
    Default: eu-west-1
  CloudTrailBucketLogPrefix:
    Type: String
    Description: Cloudtrail bucket region
    Default: 'o-m74320e6qa'
  KMSKeyArn:
    Description: SSE-KMS Arn .
    Default: ''
    Type: String
  PermissionsBoundary:
    Description: 'The name of the permission boundary for all roles created by this template.'
    Type: String
    Default: ''

Conditions:
  PermissionsBoundary: !Not [ !Equals [ !Ref PermissionsBoundary, '' ] ]
#  CreateSecret: !Not [ !Equals [ !Ref UptycsSecretName, '' ] ]

Resources:
  UptycsRegistrationLambda:
    Type: AWS::Lambda::Function
    DependsOn:
#    - WriteSecretToSecretsManagerCustomResource
    - UptycsSetupCustomResource
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Sub '${S3KeyPrefix}/lambda/UptycsRegistrationHandler-0.0.1.zip'
      Environment:
        Variables:
          UPTYCS_SECRET_STORE: !Ref UptycsSecretName
      Handler: uptycs_account_registration.lambda_handler
      Runtime: python3.7
      Timeout: 500
      Role: !GetAtt UptycsAccountFunctionRole.Arn

  RegisterAcct:
    DependsOn: UptycsSetupCustomResource
    Type: Custom::UptycsRegistration
    Properties:
      ServiceToken: !GetAtt UptycsRegistrationLambda.Arn
      role_name: !Ref UptycsRoleName
      ctaccount: !Ref CloudTrailAccount
      ctprefix: !Ref CloudTrailBucketLogPrefix
      ctbucket: !Ref CloudTrailBucketName
      ctregion: !Ref CloudTrailBucketRegion


  LambdaZipsBucket:
    Type: AWS::S3::Bucket

  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: !Ref 'S3BucketName'
      Prefix: !Ref 'S3KeyPrefix'
      Objects:
        - '/lambda/UptycsSetupHandler-0.0.1.zip'
        - '/lambda/UptycsAccountHandler-0.0.1.zip'
        - '/lambda/UptycsRegistrationHandler-0.0.1.zip'
        - '/templates/uptycs-bucket-policy.json'
        - '/templates/log_acct_template.json'
        - '/templates/member_acct_template.json'

  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundary
          - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
          - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${S3BucketName}/${S3KeyPrefix}*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:PutObjectTagging
                Resource:
                  - !Sub 'arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${S3KeyPrefix}*'

  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from the S3 bucket to a new location.
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)


  # SNS Infra
  UptycsAccountSNS:
    Type: AWS::SNS::Topic

  UptycsAccountFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundary
          - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
          - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: Account_Operations
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: StackSetInstanceOperations
                Effect: Allow
                Action:
                  - cloudformation:CreateStackInstances
                  - cloudformation:ListStackInstances
                  - cloudformation:ListStackSetOperations
                  - cloudformation:DescribeStackSetOperation
                  - cloudformation:DeleteStackInstances
                  - cloudformation:DescribeStackSet
                Resource: !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/Uptycs*'
              - Sid: ManageSecret
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${UptycsSecretName}*
              - Sid: SNSOperations
                Effect: Allow
                Action:
                  - sns:Publish
                Resource:
                  - !Ref UptycsAccountSNS

      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/AWSOrganizationsReadOnlyAccess'

  CreateAccountRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Event rule for CreateManagedAccount events
      EventPattern:
        source:
          - aws.organizations
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - organizations.amazonaws.com
          eventName:
            - CreateManagedAccount
            - UpdateManagedAccount
      Targets:
        - Arn: !GetAtt UptycsAccountFunction.Arn
          Id: AccountFunctionTarget


  UptycsAccountFunction: # the account function deploys the stackset cloudformation template that allows Uptycs to get cross account access to read AWS audit logs and config
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Sub '${S3KeyPrefix}/lambda/UptycsAccountHandler-0.0.1.zip'
      Handler: uptycs_account_handler.lambda_handler
      Runtime: python3.7
      Timeout: 500
      Environment:
        Variables:
          UPTYCS_ROLE_NAME: !Ref UptycsRoleName
          UPTYCS_ACCOUNT_NUMBER: !Ref UptycsAccountId
          PERMISSIONS_BOUNDARY: !Ref PermissionsBoundary
          UPTYCS_STACKSET_NAME: !Ref UptycsStackSetName
          UPTYCS_SECRET_STORE: !Ref UptycsSecretName
          uptycs_account_topic: !Ref UptycsAccountSNS
      Role: !GetAtt UptycsAccountFunctionRole.Arn


  UptycsAccountSNSLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt UptycsAccountFunction.Arn
      Principal: sns.amazonaws.com
      SourceArn: !Ref UptycsAccountSNS

  UptycsAccountSNSSubscription: # stackset function subscribes to new SNS messages
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt UptycsAccountFunction.Arn
      Protocol: lambda
      TopicArn: !Ref UptycsAccountSNS

  UptycsDLQ: # dead letter queue
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600
#
# Secrets manager setup - Not required
#
#  WriteSecretToSecretsManagerCustomResource:
#    Condition: CreateSecret
#    Type: Custom::WriteSecretToSecretsManager
#    Properties:
#      ServiceToken: !GetAtt WriteSecretToSecretsManagerLambda.Arn
#      parameter_name: !Ref UptycsSecretName
#      SecretData:
#        key: !Ref UptycsAPIKey
#        secret: !Ref UptycsSecret
#        customerId: !Ref UptycsCustomerId
#        domain: !Ref UptycsDomain
#        domainSuffix: !Ref UptycsDomainSuffix
#        uptycs_role_name: !Ref UptycsRoleName
#        uptycs_account_id: !Ref UptycsAccountId
#  WriteParameterExecutionRole:
#    Condition: CreateSecret
#    Type: "AWS::IAM::Role"
#    Properties:
#      PermissionsBoundary:
#        Fn::If:
#          - PermissionsBoundary
#          - !Sub 'arn:aws:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
#          - Ref: AWS::NoValue
#      AssumeRolePolicyDocument:
#        Version: "2012-10-17"
#        Statement:
#          - Effect: "Allow"
#            Principal:
#              Service: "lambda.amazonaws.com"
#            Action: "sts:AssumeRole"
#      Path: "/"
#      ManagedPolicyArns:
#        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
#      Policies:
#        - PolicyName: "SecretsManager"
#          PolicyDocument:
#            Version: "2012-10-17"
#            Statement:
#              - Sid: WriteSecret
#                Effect: Allow
#                Action:
#                  - secretsmanager:GetSecretValue
#                  - secretsmanager:DescribeSecret
#                  - secretsmanager:PutSecretValue
#                  - secretsmanager:CreateSecret
#                  - secretsmanager:DeleteSecret
#                  - secretsmanager:UpdateSecret
#                Resource: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${UptycsSecretName}*
#
#  WriteSecretToSecretsManagerLambda:
#    Condition: CreateSecret
#    Type: AWS::Lambda::Function
#    Properties:
#      Handler: index.lambda_handler
#      MemorySize: 512
#      Runtime: python3.8
#      Role: !GetAtt WriteParameterExecutionRole.Arn
#      Timeout: 20
#      Code:
#        ZipFile: |
#          import boto3
#          import cfnresponse
#          from botocore.exceptions import ClientError
#          import logging
#          import json
#          import uuid
#
#          logger = logging.getLogger()
#          logger.setLevel(logging.INFO)
#          response_data = {}
#
#          class SecretsManagerClient:
#              def __init__(self, secret_name: str):
#                  self.secrets_client = boto3.client('secretsmanager')
#                  self.secret_name = secret_name
#
#              def create_or_update_secret(self, secret_value: str) -> dict:
#                  try:
#                      response = self.secrets_client.create_secret(
#                          Name=self.secret_name,
#                          SecretString=secret_value
#                      )
#                  except self.secrets_client.exceptions.ResourceExistsException:
#                      response = self.secrets_client.update_secret(
#                          SecretId=self.secret_name,
#                          SecretString=secret_value
#                      )
#
#                  return response
#
#              def delete_secret(self) -> dict:
#                  response = self.secrets_client.delete_secret(
#                      SecretId=self.secret_name,
#                      ForceDeleteWithoutRecovery=True
#                  )
#                  return response
#
#
#          def generate_uuid():
#              return str(uuid.uuid4())
#
#
#          def lambda_handler(event, context):
#              secret_name = event['ResourceProperties']['secret_name']
#              status = cfnresponse.SUCCESS
#              secret = SecretsManagerClient(secret_name)
#              if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
#                  try:
#                      external_id = generate_uuid()
#                      logger.info('EVENT Received: {}'.format(event))
#                      secret_data = event['ResourceProperties']['SecretData']
#                      secret_data["external_id"] = external_id
#                      response = secret.create_or_update_secret(
#                          json.dumps(secret_data)
#                      )
#                      status = response['ResponseMetadata']['HTTPStatusCode']
#                      if status == 200:
#                          logger.info('Created parameter version {}'.format(response.get('Version')))
#                          response_data = {
#                              'Status': 'SUCCESS',
#                              'external_id': external_id,
#                              'Reason': 'Created Parameter',
#                              'Data': {'Version': response.get('Version')}
#                          }
#                  except ClientError as client_error:
#                      logger.info('Client Exception {}'.format(client_error))
#                      response_data = {
#                          'Status': 'FAILED',
#                          'Data': {'Got client error {}'.format(client_error)}
#                      }
#                      status = cfnresponse.FAILED
#                  except Exception as error:
#                      response_data = {
#                          'Status': 'FAILED',
#                          'Data': {'`UptycsSecretName': secret_name}
#                      }
#                      logger.info('Error Received: {}'.format(error))
#                      status = cfnresponse.FAILED
#                  finally:
#                      cfnresponse.send(event, context, status, response_data)
#                      return {'ExternalId': external_id}
#
#
#              elif event['RequestType'] == 'Delete':
#                  try:
#                      response = secret.delete_secret()
#                      status = response['ResponseMetadata']['HTTPStatusCode']
#                      if status == 200:
#                          logger.info('Deleted Parameter')
#                          response_data = {
#                              'Status': 'SUCCESS'}
#                  except ClientError as client_error:
#                      logger.info('Client Exception {}'.format(client_error))
#                      response_data = {
#                          'Status': 'FAILED',
#                          'Data': {'Got client error {}'.format(client_error)}
#                      }
#
#                  except Exception as error:
#                      response_data = {
#                          'Status': 'FAILED',
#                          'Data': {'Got general error'}
#                      }
#                      logger.info('Failed to delete parameter')
#                  finally:
#                      cfnresponse.send(event, context, status, response_data)

  UptycsSetupCustomResource:
    Type: Custom::UptycsSetupCustomResource
    Properties:
      ServiceToken: !GetAtt UptycsSetupLambdaFunction.Arn

  UptycsSetupLambdaFunction: # Create the StackSet resource
    Type: AWS::Lambda::Function
    DependsOn: CopyZips
    Properties:
      Code:
        S3Bucket: !Ref LambdaZipsBucket
        S3Key: !Join [ '', [ !Ref 'S3KeyPrefix', '/lambda/UptycsSetupHandler-0.0.1.zip' ] ]
      Handler: uptycs_setup.lambda_handler
      Runtime: python3.7
      Timeout: 500
      Environment:
        Variables:
          PERMISSIONS_BOUNDARY: !Ref PermissionsBoundary
          UPTYCS_ROLE_NAME: !Ref UptycsRoleName
          UPTYCS_POLICY_FILE: !Join [ '', [ !Ref 'S3KeyPrefix', '/templates/uptycs-bucket-policy.json' ] ]
          UPTYCS_S3_BUCKET: !Ref LambdaZipsBucket
          UPTYCS_SECRET_STORE: !Ref UptycsSecretName
          UPTYCS_ACCOUNT_MGT_TOPIC: !Ref UptycsAccountSNS
          EXISTING_ACCOUNTS: !Ref ExistingAccounts
          UPTYCS_MEMBER_ACCOUNT_TEMPLATE_NAME : !Join [ '', [ !Ref 'S3KeyPrefix', '/templates/member_acct_template.json' ] ]
          UPTYCS_LOG_ACCOUNT_TEMPLATE_NAME : !Join [ '', [ !Ref 'S3KeyPrefix', '/templates/log_acct_template.json' ] ]
          UPTYCS_ACCOUNT_NUMBER: !Ref UptycsAccountId
          UPTYCS_STACKSET_NAME: !Ref UptycsStackSetName
          CLOUDTRAIL_BUCKET_NAME: !Ref CloudTrailBucketName
          KMS_KEY_ARN: !Ref KMSKeyArn
      Role: !GetAtt UptycsSetupFunctionRole.Arn

  UptycsSetupFunctionRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - EIAMPolicyWildcardResource
    Properties:
      PermissionsBoundary:
        Fn::If:
          - PermissionsBoundary
          - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${PermissionsBoundary}'
          - Ref: AWS::NoValue
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: Setup_Operations
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Sid: StackOperations
            Effect: Allow
            Action:
              - cloudformation:ListStacks
              - cloudformation:DescribeStacks
              - cloudformation:DeleteStack
              - cloudformation:CreateStack
            Resource:
              !Sub 'arn:${AWS::Partition}:cloudformation:*:*:stack/*'
          - Sid: StackSetInstance
            Effect: Allow
            Action:
              - cloudformation:DescribeStackInstance
              - cloudformation:UpdateStackInstances
              - cloudformation:CreateStackInstances
              - cloudformation:DeleteStackInstances
              - cloudformation:ListStackInstances
              - cloudformation:UpdateStackSet
              - cloudformation:CreateStackSet
              - cloudformation:DeleteStackSet
              - cloudformation:DescribeStackSetOperation
              - cloudformation:DescribeStackSet
            Resource:
              - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stackset/*:*'
              - !Sub 'arn:${AWS::Partition}:cloudformation:*:*:type/resource/*'
              - !Sub 'arn:${AWS::Partition}:cloudformation:*:*:stackset-target/*'
          - Sid: S3Ops
            Effect: Allow
            Action:
            - s3:ListBucket
            - s3:GetObject
            Resource:
              - !Sub 'arn:${AWS::Partition}:s3:::${LambdaZipsBucket}/${S3KeyPrefix}/*'
          - Sid: SNSOps
            Effect: Allow
            Action:
            - sns:Publish
            Resource: !Ref UptycsAccountSNS
          - Sid: PassRole
            Effect: Allow
            Action:
            - iam:PassRole
            Resource:
              !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/service-role/AWSControlTowerStackSetRole'
          - Sid: ManageSecret
            Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
#              - secretsmanager:PutSecretValue
#              - secretsmanager:CreateSecret
#              - secretsmanager:DeleteSecret
#              - secretsmanager:UpdateSecret
            Resource: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${UptycsSecretName}*
          - Sid: OrgAccounts
            Effect: Allow
            Action:
              - organizations:ListAccounts
              - organizations:DescribeAccount
              - organizations:DescribeOrganization
              - organizations:DescribeOrganizationalUnit
              - organizations:ListParents
            Resource: "*"
          - Sid: GetRole
            Effect: Allow
            Action:
              - iam:GetRole
            Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*
          - Sid: CreateRole
            Effect: Allow
            Action:
              - iam:GetRole
              - iam:CreateRole
              - iam:DetachRolePolicy
              - iam:DeleteRolePolicy
              - iam:PutRolePolicy
              - iam:GetRolePolicy
              - iam:AttachRolePolicy
            Resource:
              - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${UptycsRoleName}
              - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/*
      ManagedPolicyArns:
      - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'


    

